/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

require InlineDrawing:">1.0.0";
require Manipulation;
require Singletons;

object XBoxViewportCallback : ViewportCallback {
  XBoxController controller;
  Float32 walkSpeed;
  Float32 turnSpeed;
  Boolean requiresUpdate;
};

function XBoxViewportCallback() {
  this.init(XBoxController(XBOX_GAMEPAD_0));
  this.requiresUpdate = true;
}

function XBoxViewportCallback(XBoxController controller) {
  this.init(controller);
  this.requiresUpdate = false;
}

function XBoxViewportCallback.init!(XBoxController controller) {
  this.controller = controller;
  this.walkSpeed = 1.0;
  this.turnSpeed = 1.0;
}

function XBoxViewportCallback.registerForViewport!(String viewportName) {
  InlineDrawing drawing = Singleton_get('InlineDrawing');
  Viewport viewport = drawing.getViewport(viewportName);
  if(viewport) {
    viewport.registerCallback(ViewportDrawPhase_PreDraw, this);
  }
}

function XBoxViewportCallback.registerForViewport!() {
  this.registerForViewport('default');
}

function Boolean XBoxViewportCallback.invoke!(ViewportDrawPhase phase, io Viewport viewport, io DrawContext context) {
  switch(phase) {

    case ViewportDrawPhase_PreDraw: {

      if(this.requiresUpdate)
        this.controller.update();

      Float32 x, y, z;
      this.controller.stickNormXY(XBOX_STICK_LEFT, x, z);

      if(this.controller.buttonDown(XBOX_BUTTON_DPAD_UP))
        y = 1.0;
      else if(this.controller.buttonDown(XBOX_BUTTON_DPAD_DOWN))
        y = -1.0;
      
      // let the manipulator know of our camera
      // this.manipulator.pan(Vec2(-x, y) * this.walkSpeed * 0.25);
      // this.manipulator.dolly(z * this.walkSpeed * 0.0025);

      InlineCamera camera = viewport.getCamera();

      camera.goalLinearVelocity.x = x * this.walkSpeed * 0.25;
      camera.goalLinearVelocity.y = y * this.walkSpeed * 0.25;
      camera.goalLinearVelocity.z = -z * this.walkSpeed * 0.25;

      this.controller.stickNormXY(XBOX_STICK_RIGHT, x, y);

      camera.goalAngularVelocity.x = -x * this.turnSpeed * 0.02;
      camera.goalAngularVelocity.y = y * this.turnSpeed * 0.02;

      camera.update();
    }
  }
  return false;
}
