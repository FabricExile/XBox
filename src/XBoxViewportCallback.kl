/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

require SpliceStandalone:">1.0.0";
require Singletons;

object XBoxViewportCallback : SpliceStandaloneViewportCallback {
  XBoxController controller;
  Xfo xfo;
  Float32 walkSpeed;
  Float32 turnSpeed;
  Boolean requiresUpdate;
};

function XBoxViewportCallback() {
  this.init(XBoxController(XBOX_GAMEPAD_0), Xfo());
  this.requiresUpdate = true;
}

function XBoxViewportCallback(XBoxController controller, Xfo xfo) {
  this.init(controller, xfo);
  this.requiresUpdate = false;
}

function XBoxViewportCallback.init!(XBoxController controller, Xfo xfo) {
  this.controller = controller;
  this.xfo = xfo;
  this.walkSpeed = 1.0;
  this.turnSpeed = 1.0;
}

function XBoxViewportCallback.registerForViewport!() {
  SpliceStandaloneViewport viewport = Singleton_get('Viewport');
  if(viewport) {
    viewport.registerCallback(SpliceStandaloneViewportPhase_Camera, this);
  }
}

function Boolean XBoxViewportCallback.perform!(SpliceStandaloneViewportPhase phase, io SpliceStandaloneViewport viewport) {
  switch(phase) {

    case SpliceStandaloneViewportPhase_Camera: {

      Vec3 xAxis = this.xfo.ori.getXaxis();
      Vec3 zAxis = this.xfo.ori.getZaxis();

      if(this.requiresUpdate)
        this.controller.update();

      Float32 x, y, z;
      this.controller.stickNormXY(XBOX_STICK_LEFT, x, z);
      if(this.controller.buttonDown(XBOX_BUTTON_DPAD_UP))
        y = 1.0;
      else if(this.controller.buttonDown(XBOX_BUTTON_DPAD_DOWN))
        y = -1.0;
      viewport.camera.walk(x * this.walkSpeed * 0.25, y * this.walkSpeed * 0.25, -z * this.walkSpeed * 0.25);

      this.controller.stickNormXY(XBOX_STICK_RIGHT, x, y);
      viewport.camera.turn(-x * this.turnSpeed * 0.0225, y * this.turnSpeed * 0.0225);
    }
  }
  return false;
}
