/*
 *  Copyright 2010-2014 Fabric Software Inc. All rights reserved.
 */

require SpliceStandalone:">1.0.0";
require Singletons;

object XBoxViewportCallback : SpliceStandaloneViewportCallback {
  XBoxController controller;
  Xfo xfo;
  Float32 walkSpeed;
  Float32 turnSpeed;
};

function XBoxViewportCallback() {
  this.init(null, Xfo());
}

function XBoxViewportCallback(XBoxController controller, Xfo xfo) {
  this.init(controller, xfo);
}

function XBoxViewportCallback.init!(XBoxController controller, Xfo xfo) {
  this.controller = controller;
  this.xfo = xfo;
  this.walkSpeed = 1.0;
  this.turnSpeed = 1.0;
}

function XBoxViewportCallback.registerForViewport!() {
  SpliceStandaloneViewport viewport = Singleton_get('Viewport');
  if(viewport) {
    viewport.registerCallback(SpliceStandaloneViewportPhase_BeforePaint, this);
  }
}

function Boolean XBoxViewportCallback.perform!(SpliceStandaloneViewportPhase phase, io SpliceStandaloneViewport viewport) {
  switch(phase) {

    case SpliceStandaloneViewportPhase_BeforePaint: {

      Vec3 xAxis = this.xfo.ori.getXaxis();
      Vec3 zAxis = this.xfo.ori.getZaxis();

      Float32 x, y;
      this.controller.stickNormXY(XBOX_STICK_LEFT, x, y);
      this.xfo.tr += xAxis * x * 0.75 * this.walkSpeed;
      this.xfo.tr -= zAxis * y * 0.75 * this.walkSpeed;

      Quat xRot, yRot;
      this.controller.stickNormXY(XBOX_STICK_RIGHT, x, y);
      xRot.setFromAxisAndAngle(Vec3(1, 0, 0), -y * 0.025 * this.turnSpeed);
      yRot.setFromAxisAndAngle(Vec3(0, 1, 0), -x * 0.025 * this.turnSpeed);
      this.xfo.ori = xRot * this.xfo.ori;
      this.xfo.ori = yRot * this.xfo.ori;

      Vec3 target = this.xfo.ori.rotateVector(Vec3(0, 0, 1));
      this.xfo.ori.setFromDirectionAndUpvector(target, Vec3(0, 1, 0));

      viewport.drawContext.viewport.camera.mat44 = this.xfo.toMat44();  
    }
  }
  return false;
}
