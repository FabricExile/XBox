// Created by kl2dfg (processFunction)
{
  "objectType" : "Func",
  "metadata" : {
    "uiTooltip" : "* Test if a particular button has been released since the previous call to GamepadUpdate.\n\n* \\param device The device to check.\n* \\param button The button to check.\n* \\returns GAMEPAD_TRUE if the button has been released, GAMEPAD_FALSE if it is down or if it was not down the previous frame.\n\n\n Supported by XBoxController"
    },
  "title" : "ButtonReleased[]",
  "ports" : [
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "this",
      "execPortType" : "In",
      "typeSpec" : "XBoxController[]"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "defaultValues" : {
        "XBOX_GAMEPAD_BUTTON[]" : [
          0
          ]
        },
      "name" : "button",
      "execPortType" : "In",
      "typeSpec" : "XBOX_GAMEPAD_BUTTON[]"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "In",
      "name" : "result",
      "execPortType" : "Out",
      "typeSpec" : "Boolean[]"
      }
    ],
  "extDeps" : {
    "XBox" : "*"
    },
  "presetGUID" : "2EA1C08B457481B631DBBA28945A550F",
  "code" : "require XBox;

operator XBox_XBoxController_buttonReleased_task<<<index>>>(
  io Boolean[] result
, in XBoxController[] this
, in XBOX_GAMEPAD_BUTTON[] button
) {
  result[index] = this[index < this.size() ? index : this.size() - 1].buttonReleased(button[index < button.size() ? index : button.size() - 1]);
}

dfgEntry {
  if( this.size() == 0) return;
  if( button.size() == 0) return;
  Size task_size = this.size();
  if(task_size < button.size()) task_size = button.size();
  result.resize(task_size);
  if(task_size < 10000 /* pex margin */) {
    for(Size index = 0; index < task_size; index++) {
      XBox_XBoxController_buttonReleased_task(index, result, this, button);
    }
  } else {
    XBox_XBoxController_buttonReleased_task<<<task_size>>>(result, this, button);
  }
}
"
  }